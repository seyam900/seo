import os
import re
from urllib.parse import urlparse, parse_qs
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from pytube import YouTube
from pytube.exceptions import RegexMatchError
from dotenv import load_dotenv

# Load env vars
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = "SL_TooL_HuB"  # Without '@'

# üîò SEO Menu
def get_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé¨ Get Title", callback_data='get_title')],
        [InlineKeyboardButton("üè∑Ô∏è Get Tags", callback_data='get_tags')],
        [InlineKeyboardButton("#Ô∏è‚É£ Get Hashtags", callback_data='get_hashtags')]
    ])

# üîê Channel Check
async def is_subscriber(user_id, context):
    try:
        member = await context.bot.get_chat_member(chat_id=f"@{CHANNEL_USERNAME}", user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        print(f"[DEBUG] Channel check failed: {e}")
        return False

# üöÄ Start Command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if not await is_subscriber(user_id, context):
        join_btn = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîê Join Channel", url=f"https://t.me/{CHANNEL_USERNAME}")],
            [InlineKeyboardButton("‚úÖ I've Joined", callback_data='check_join')]
        ])
        await update.message.reply_text("üö´ You must join our premium channel to use this bot:", reply_markup=join_btn)
        return

    await update.message.reply_text(
        "üëã Welcome to *YouTube SEO Bot!*\n\nüîç Just send a video link and select an option below:",
        reply_markup=get_menu(),
        parse_mode='Markdown'
    )

# ‚úÖ Re-check Channel Join
async def check_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.callback_query
    await query.answer()

    if not await is_subscriber(user_id, context):
        await query.edit_message_text("üö´ You are still not a member. Please join first: https://t.me/" + CHANNEL_USERNAME)
    else:
        await query.edit_message_text("‚úÖ You're verified!\n\nPlease send a YouTube video link:")
        context.user_data['joined'] = True

# üîò Button Press
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if not await is_subscriber(user_id, context):
        await query.edit_message_text("üö´ Please join our channel first: https://t.me/" + CHANNEL_USERNAME)
        return

    context.user_data['action'] = query.data
    await query.edit_message_text("üì© Please send the YouTube video link:")

# ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ URL ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def clean_youtube_url(url):
    parsed = urlparse(url)
    qs = parse_qs(parsed.query)
    video_id = qs.get('v')
    if video_id:
        return f"https://www.youtube.com/watch?v={video_id[0]}"
    # ‡¶Ø‡¶¶‡¶ø youtu.be ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶π‡ßü ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ‡¶ì ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßã‡¶° ‡¶¨‡¶æ‡ßú‡¶æ‡¶§‡ßá ‡¶π‡¶¨‡ßá
    if parsed.netloc == 'youtu.be':
        video_id = parsed.path.lstrip('/')
        if video_id:
            return f"https://www.youtube.com/watch?v={video_id}"
    return url  # ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá ‡¶Ü‡¶∏‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡ßã

# üì© Handle Link (UPDATED)
async def handle_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await is_subscriber(user_id, context):
        await update.message.reply_text("üö´ Please join our channel first: https://t.me/" + CHANNEL_USERNAME)
        return

    link = update.message.text.strip()
    print(f"[DEBUG] Raw user link: {link}")

    # ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡¶ì
    link = clean_youtube_url(link)
    print(f"[DEBUG] Cleaned link: {link}")

    # Validate YouTube URL (basic check)
    YOUTUBE_REGEX = r"^(https?://)?(www\.)?youtube\.com/watch\?v=[\w\-]+$"
    if not re.match(YOUTUBE_REGEX, link):
        await update.message.reply_text("‚ùó ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï YouTube ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¶‡¶ø‡¶® (‡¶Ø‡ßá‡¶Æ‡¶® https://www.youtube.com/watch?v=VIDEO_ID)‡•§")
        return

    action = context.user_data.get('action')
    if not action:
        await update.message.reply_text("‚ùó ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá /start ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ö‡¶™‡¶∂‡¶® ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    try:
        yt = YouTube(link)

        if action == 'get_title':
            result = yt.title

        elif action == 'get_tags':
            result = ', '.join(yt.keywords) if yt.keywords else "No tags found."

        elif action == 'get_hashtags':
            if yt.keywords:
                result = ' '.join([f"#{tag.replace(' ', '').lower()}" for tag in yt.keywords])
            else:
                result = "No hashtags found."
        else:
            await update.message.reply_text("‚ùó ‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶Ö‡¶™‡¶∂‡¶®, ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
            return

        # Result + Copy + Menu
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìã Copy", switch_inline_query=result)],
            [InlineKeyboardButton("üîÅ Back to Menu", callback_data='menu')]
        ])

        await update.message.reply_text(
            f"‚úÖ *Result:*\n```{result}```",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    except RegexMatchError:
        await update.message.reply_text("‚ùó ‡¶è‡¶á ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶®‡ßü ‡¶¨‡¶æ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ü‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
    except Exception as e:
        print(f"[DEBUG] Exception: {e}")
        await update.message.reply_text(f"‚ö†Ô∏è ‡¶è‡¶∞‡¶∞: {e}")

# üîÅ Menu Again
async def handle_menu_reload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    await query.edit_message_text("üîò Please select an option:", reply_markup=get_menu())

# Run Bot
app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(button_handler, pattern="^(get_title|get_tags|get_hashtags)$"))
app.add_handler(CallbackQueryHandler(handle_menu_reload, pattern="^menu$"))
app.add_handler(CallbackQueryHandler(check_join, pattern="^check_join$"))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_link))

print("ü§ñ Bot is running...")
app.run_polling()
